# https://taskfile.dev

version: '3'

env:
  MIGRATION_ROOT: "tools/migrations"
  SEED_ROOT: "tools/seeder"

tasks:
  setup:
    desc: "ローカル環境のセットアップを行う。(gitコマンドが使用できるようにする)"
    cmds:
      - cp {{.APP_ROOT}}/.gitconfig /root/.gitconfig
      - git config --global core.autocrlf input
      - git config --global --add safe.directory {{.APP_ROOT}}
      - chmod +x {{.APP_ROOT}}/.github/hooks/pre-commit
      - git config core.hooksPath {{.APP_ROOT}}/.github/hooks
      # わざわざコピーする理由は、commit時に毎回メアドとユーザー名の設定(.gitconfigの作成)を求められ面倒なので、git cloneするなら作成済みであろう.gitconfigを使うという魂胆である。
      # だが、Windowsユーザーが.gitconfigを使用中と解釈されるようでgit configコマンドが失敗するため、ファイルをコピーする必要がある。
      # core.autocrlf inputを使用する理由は、Linuxの改行コードが原因で差分が表示されてしまうため。
      # safe.directory $APP_ROOTを使用する理由は、WSL2側に配置しgitを使うには毎回求められるため。

  run:
    desc: "リモートコンテナ tcpリンク発行"
    cmds:
      - task: setup
      - ide/bin/remote-dev-server.sh run /data --listenOn 0.0.0.0 --port 5994

  air:
    desc: "ホットリロード 起動"
    cmds:
      - air -c .air.toml

  run-remote-dev:
    desc: "リモート開発サーバーを起動"
    cmds:
      - air -c .air.toml & ide/bin/remote-dev-server.sh run /data --listenOn 0.0.0.0 --port 5994

  migration-drop:
    desc: "develop schema のテーブルを削除する。"
    cmds:
      - go run {{.MIGRATION_ROOT}}/main.go dev drop

  migration-create:
    desc: "develop schema のテーブル作成する。"
    cmds:
      - go run {{.MIGRATION_ROOT}}/main.go dev create

  migration-test-drop:
    desc: "test schema のテーブルを削除する。"
    cmds:
      - go run {{.MIGRATION_ROOT}}/main.go test drop

  migration-test-create:
    desc: "test schema のテーブルを作成する。"
    cmds:
      - go run {{.MIGRATION_ROOT}}/main.go test create

  migration-fresh:
    desc: "develop schema のテーブルを削除し作成する。"
    cmds:
      - task: migration-drop
      - task: migration-create

  migration-fresh-test:
    desc: "test schema のテーブルを削除し作成する。"
    cmds:
      - task: migration-test-drop
      - task: migration-test-create

  seed-dev:
    desc: "develop schema のテーブルにデータを投入する。"
    cmds:
      - go run {{.SEED_ROOT}}/main.go dev

  seed-test:
    desc: "test schema のテーブルにデータを投入する。"
    cmds:
      - go run {{.SEED_ROOT}}/main.go test

  test:
    desc: "カバレッジ率を取得する。"
    cmds:
      - go test -tags=integration -cover -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - rm coverage.out

  gmail-auth:
    desc: "Gメール認証を行う"
    cmds:
      - go run ./cmd/gmail_auth/ gmail-auth

  gmail-messages-by-label:
    desc: "Gメール取得を行い AIで字句解析を行い DBに保存する"
    env:
      LABEL: "{{.LABEL}}"
    cmds:
      - go run ./cmd/gmail_auth/main.go gmail-messages-by-label "$LABEL" {{ .CLI_ARGS }}
