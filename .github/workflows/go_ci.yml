# name: Go CI

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     strategy:
#       matrix:
#         go-version: [1.24]

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Go
#       uses: actions/setup-go@v5
#       with:
#         go-version: ${{ matrix.go-version }}

#     - name: Cache Go modules
#       uses: actions/cache@v4
#       with:
#         path: |
#           ~/.cache/go-build
#           ~/go/pkg/mod
#         key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#         restore-keys: |
#           ${{ runner.os }}-go-

#     - name: Download dependencies
#       run: go mod download

#     - name: Verify dependencies
#       run: go mod verify

#     - name: Run go vet
#       run: go vet ./...

#     - name: Run tests
#       run: go test -v -race -coverprofile=coverage.out ./...

#     - name: Generate coverage report
#       run: go tool cover -html=coverage.out -o coverage.html

#     - name: Upload coverage reports
#       uses: actions/upload-artifact@v4
#       with:
#         name: coverage-report
#         path: |
#           coverage.out
#           coverage.html

#     - name: Check test coverage
#       run: |
#         COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
#         echo "Total coverage: ${COVERAGE}%"
#         if (( $(echo "$COVERAGE < 80" | bc -l) )); then
#           echo "Coverage is below 80%"
#           exit 1
#         fi

#   lint:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Go
#       uses: actions/setup-go@v5
#       with:
#         go-version: 1.24

#     - name: Run golangci-lint
#       uses: golangci/golangci-lint-action@v6
#       with:
#         version: latest
#         args: --timeout=5m

#   build:
#     runs-on: ubuntu-latest
#     needs: [test, lint]
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Go
#       uses: actions/setup-go@v5
#       with:
#         go-version: 1.24

#     - name: Build application
#       run: |
#         go build -v -o gmail_auth ./cmd/gmail_auth
        
#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: gmail_auth-binary
#         path: gmail_auth

#   security:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Go
#       uses: actions/setup-go@v5
#       with:
#         go-version: 1.24

#     - name: Run Gosec Security Scanner
#       uses: securecodewarrior/github-action-gosec@master
#       with:
#         args: '-fmt sarif -out gosec.sarif ./...'

#     - name: Upload SARIF file
#       uses: github/codeql-action/upload-sarif@v3
#       with:
#         sarif_file: gosec.sarif
