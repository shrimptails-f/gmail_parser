# Cline 使用ガイド

## 基本方針
- 回答は日本語で行う
- ユーザーは時短のためにコーディングを依頼している
- TDDで開発を進める
- 2回以上連続でテストが失敗した場合は、現在の状況を整理してユーザーと解決方法を検討する
- コンテキストが不明瞭な時は、ユーザーに確認する

## 作業開始時の確認事項
1. `git status` で現在のgitコンテキストを確認
2. 指示内容と無関係な変更が多い場合は、新しいタスクとして開始することを提案
3. 無視するよう指示された場合はそのまま続行

# プロジェクト概要
Gmail APIを使用してメールを取得・解析し、OpenAI APIでキーワード抽出や分類を行うCLIアプリケーション。
主な機能：
- Gmail認証とメール取得
- エンジニア向け案件情報・人材情報の解析とキーワード抽出
- データベースへの保存と管理

# 実際のディレクトリ構成
```
cmd/
  gmail_auth/           # GmailCLIツール
internal/
  common/domain/        # 共通ドメインモデル
  di/                   # 依存性注入設定
  emailstore/           # メール保存機能
    application/        # ユースケース層
    infrastructure/     # リポジトリ層
  gmail/                # Gmail API機能
    application/        # ユースケース層
    domain/             # ドメイン層
    infrastructure/     # Gmail API接続層
  openAi/               # OpenAI API機能
    application/        # ユースケース層
    domain/             # ドメイン層
    infrastructure/     # OpenAI API接続層
tools/                  # 外部連携はここにまとめます
  gmail/                # Gmail関連ユーティリティ
  gmailService/         # Gmail サービスクライアント
  logger/               # ロギング
  migrations/           # データベースマイグレーション
  mysql/                # MySQL接続管理
  openai/               # OpenAI クライアント
  oswrapper/            # OS操作ラッパー
  seeder/               # テストデータ作成
test/
  fixture/              # テストフィクスチャ
  mock/                 # モックオブジェクト
```

# 技術スタック
- **言語**: Go 1.24
- **アーキテクチャ**: クリーンアーキテクチャ
- **依存性注入**: go.uber.org/dig
- **データベース**: MySQL (GORM)
- **外部API**: Gmail API, OpenAI API
- **テスト**: testify
- **ログ**: zerolog

# 開発方針

## コード品質の原則
1. **単一責任の原則**: 各関数・構造体は一つの責任のみを持つ
2. **依存性の逆転**: インターフェースを通じて依存関係を管理
3. **テスト容易性**: モック化可能な設計
4. **エラーハンドリング**: 適切なエラー伝播とラッピング

## 実装時の注意点
- **過剰な実装を避ける**: 要求された機能のみを実装
- **既存パターンの踏襲**: プロジェクト内の既存コードスタイルを維持
- **インターフェース設計**: 必要最小限のメソッドのみ定義
- **エラーメッセージ**: 具体的で分かりやすいメッセージ

## 依存性注入パターン
```go
// DIコンテナの設定例
container := dig.New()
di.ProvideCommonDependencies(container, conn)
di.ProvideGmailDependencies(container)
di.ProvideEmailStoreDependencies(container)
di.ProvideOpenAiDependencies(container)

// 使用例
container.Invoke(func(useCase *application.UseCase) {
    // useCaseを使用
})
```

# テスト戦略

## 各層のテスト方針
### ドメイン層
- ビジネスロジックの単体テスト
- 外部依存なし、モック不要
- バリデーションルールの検証

### アプリケーション層（ユースケース）
- ビジネスフローのテスト
- 依存するリポジトリ・サービスをモック化
- 正常系・異常系の両方をテスト
- エラーハンドリングの検証

### インフラストラクチャ層
- 外部API・データベースとの統合テスト
- `//go:build integration` タグで分離
- 実際のリソースを使用したテスト

### CLI層
- コマンドライン引数の処理
- 標準入出力のテスト
- 終了コードの検証

## モック使用ガイドライン
```go
// モックの基本パターン
mockRepo := &MockRepository{}
mockRepo.On("Save", mock.Anything).Return(nil).Once()

// テスト実行後の検証
mockRepo.AssertExpectations(t)
```


# プロジェクト固有の実装パターン

## Gmail API使用時
- OAuth2認証フローの実装
- APIレート制限の考慮
- メールデータの適切な構造化

## OpenAI API使用時
- プロンプトエンジニアリングの活用
- APIコスト最適化
- レスポンス解析の堅牢性

## データベース操作
- GORMを使用したモデル定義
- マイグレーションファイルの管理
- トランザクション処理

## エラーハンドリング
```go
// エラーラッピングの例
if err != nil {
    return fmt.Errorf("Gmail API呼び出しに失敗: %w", err)
}
```

# 重要な制約事項
- **実装例に惑わされない**: 必要な機能のみを実装
- **既存アーキテクチャの維持**: 現在の設計パターンを尊重
- **TDD**: 実装前にテストを書く
- **適切な抽象化**: 過度な抽象化は避ける
- **パフォーマンス考慮**: API呼び出し回数やデータベースクエリの最適化

# デバッグとトラブルシューティング
- ログレベルの適切な設定
- エラー発生時のスタックトレース保持
- 外部API呼び出し時のリトライ機構
- テスト環境での適切なモック使用
